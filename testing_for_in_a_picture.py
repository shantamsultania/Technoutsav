# -*- coding: utf-8 -*-
"""Testing for in a picture

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WLoM8HGqh1gl-f2M4AaB8c4S1by61zZV
"""

!pip install flask-ngrok

import numpy as np
import cv2
from flask import Flask,render_template,request
from werkzeug.utils import secure_filename
import pickle
import tensorflow as tf
import numpy 
from flask_ngrok import run_with_ngrok
from tensorflow.python.keras.preprocessing import image
from tensorflow.python.keras.preprocessing.image import img_to_array

# model try out 

modelloaded = tf.keras.models.load_model('/content/drive/My Drive/flask api/trained_model.h5')
def convert_image_to_array(image_dir):
    default_image_size = tuple((64, 64))
    try:
        image = cv2.imread(image_dir)
        if image is not None :
            image = cv2.resize(image, default_image_size)
            img = img_to_array(image)
            img2 = np.expand_dims(img,0)
            return img2
        else :
            return np.array([])
    except Exception as e:
        print("Error :", e)
        return None



image ="/content/drive/My Drive/flask api/test2.JPG"

cag = ["Apple___Apple_scab", "Apple___Black_rot", "Apple___Cedar_apple_rust",'Apple___healthy', 'Blueberry___healthy',
           'Cherry_(including_sour)___Powdery_mildew','Cherry_(including_sour)___healthy','Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot',
           'Corn_(maize)___Common_rust_', 'Corn_(maize)___Northern_Leaf_Blight','Corn_(maize)___healthy', 'Grape___Black_rot',
           'Grape___Esca_(Black_Measles)','Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 'Grape___healthy',
           'Orange___Haunglongbing_(Citrus_greening)', 'Peach___Bacterial_spot','Peach___healthy', 'Pepper_bell___Bacterial_spot',
           'Potato___Early_blight', 'Potato___Late_blight','Potato___healthy', 'Raspberry___healthy', 'Soybean___healthy',
           'Squash___Powdery_mildew', 'Strawberry___Leaf_scorch','Strawberry___healthy', 'Tomato___Bacterial_spot', 'Tomato___Early_blight',
           'Tomato___Late_blight', 'Tomato___Leaf_Mold', 'Tomato___Septoria_leaf_spot','Tomato___Spider_mites Two-spotted_spider_mite', 'Tomato___Target_Spot',
           'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus','Tomato___healthy']
    
predict = modelloaded.predict([convert_image_to_array(image)])
x = np.where(predict == 1.)
f = int(x[1])
print(cag[f])

app=Flask(__name__,template_folder='/content/drive/My Drive/flask api/template/')
run_with_ngrok(app)

modelloaded = tf.keras.models.load_model('/content/drive/My Drive/flask api/trained_model.h5')

@app.route('/')
def home():
    return render_template('plant detection.html')
@app.route('/picture',methods = ['post','get'])
def upload_file():
   if request.method == 'POST':
      f = request.files['img']
      f.save(secure_filename(f.filename))
      result = predict(f.filename,modelloaded)
      return render_template('plant detection.html',info= result)

def predict(image,modelloaded):
    categories = ["Apple___Apple_scab", "Apple___Black_rot", "Apple___Cedar_apple_rust",'Apple___healthy', 'Blueberry___healthy',
           'Cherry_(including_sour)___Powdery_mildew','Cherry_(including_sour)___healthy','Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot',
           'Corn_(maize)___Common_rust_', 'Corn_(maize)___Northern_Leaf_Blight','Corn_(maize)___healthy', 'Grape___Black_rot',
           'Grape___Esca_(Black_Measles)','Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 'Grape___healthy',
           'Orange___Haunglongbing_(Citrus_greening)', 'Peach___Bacterial_spot','Peach___healthy', 'Pepper_bell___Bacterial_spot',
           'Potato___Early_blight', 'Potato___Late_blight','Potato___healthy', 'Raspberry___healthy', 'Soybean___healthy',
           'Squash___Powdery_mildew', 'Strawberry___Leaf_scorch','Strawberry___healthy', 'Tomato___Bacterial_spot', 'Tomato___Early_blight',
           'Tomato___Late_blight', 'Tomato___Leaf_Mold', 'Tomato___Septoria_leaf_spot','Tomato___Spider_mites Two-spotted_spider_mite', 'Tomato___Target_Spot',
           'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus','Tomato___healthy']
    predict = modelloaded.predict([convert_image_to_array(image)])
    x = np.where(predict == 1)
    print(x)
    f = int(x[1])
    print(f)
    return categories[f]

def convert_image_to_array(image_dir):
    default_image_size = tuple((64, 64))
    try:
        image = cv2.imread(image_dir)
        if image is not None :
            image = cv2.resize(image, default_image_size)
            img = img_to_array(image)
            img2 = np.expand_dims(img,0)
            return img2
        else :
            return np.array([])
    except Exception as e:
        print("Error :", e)
        return None

if __name__=="__main__":
    app.run()







